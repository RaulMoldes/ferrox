
pub trait CPUFloat: GPUFloat {

    fn zero() -> Self {
        <Self as GPUFloat>::from_f64(0.0)
            .expect("Failed to convert 0.0 to CPUFloat type")
    }
    fn one() -> Self {
        <Self as GPUFloat>::from_f64(1.0)
        .expect("Failed to convert 1.0 to CPUFloat type")
    }
    /// Square root
    fn sqrt(self) -> Self;

    /// Exponential function (e^x)
    fn exp(self) -> Self;

    /// Natural logarithm
    fn ln(self) -> Self;

    /// Base-10 logarithm
    fn log10(self) -> Self;

    /// Power with floating-point exponent
    fn powf(self, exp: Self) -> Self;

    /// Sine
    fn sin(self) -> Self;

    /// Cosine
    fn cos(self) -> Self;

    /// Tangent
    fn tan(self) -> Self;

    /// Checks if it's NaN
    fn is_nan(self) -> bool;

    /// Checks if it's infinite
    fn is_infinite(self) -> bool;

    /// Checks if it's finite
    fn is_finite(self) -> bool;

    /// Epsilon for floating-point comparisons
    fn epsilon() -> Self;

    fn to_f64(self) -> f64 {
        // Default implementation for Float types
        GPUFloat::to_f64(self)
    }

    fn from_f64(value: f64) -> Option<Self> {
        // Default implementation for Float types
        GPUFloat::from_f64(value)
    }

    fn from_i32(value: i32) -> Option<Self> {
        // Default implementation for Float types
        GPUFloat::from_i32(value)
    }

    fn from_i16(value: i16) -> Option<Self> {
        // Default implementation for Float types
        GPUFloat::from_i16(value)
    }

    fn from_i64(value: i64) -> Option<Self> {
        // Default implementation for Float types
        GPUFloat::from_i64(value)
    }


}
