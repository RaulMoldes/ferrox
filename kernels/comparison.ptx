//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-32267302
// Cuda compilation tools, release 12.0, V12.0.140
// Based on NVVM 7.0.1
//

.version 8.0
.target sm_86
.address_size 64

	// .globl	clamp

.visible .entry clamp(
	.param .u64 clamp_param_0,
	.param .u64 clamp_param_1,
	.param .f32 clamp_param_2,
	.param .f32 clamp_param_3,
	.param .u32 clamp_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [clamp_param_0];
	ld.param.u64 	%rd2, [clamp_param_1];
	ld.param.f32 	%f1, [clamp_param_2];
	ld.param.f32 	%f2, [clamp_param_3];
	ld.param.u32 	%r2, [clamp_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f3, [%rd5];
	setp.lt.f32 	%p2, %f3, %f1;
	selp.f32 	%f4, %f1, %f3, %p2;
	setp.gt.f32 	%p3, %f4, %f2;
	selp.f32 	%f5, %f2, %f4, %p3;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

$L__BB0_2:
	ret;

}
	// .globl	clamp_f64
.visible .entry clamp_f64(
	.param .u64 clamp_f64_param_0,
	.param .u64 clamp_f64_param_1,
	.param .f64 clamp_f64_param_2,
	.param .f64 clamp_f64_param_3,
	.param .u32 clamp_f64_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [clamp_f64_param_0];
	ld.param.u64 	%rd2, [clamp_f64_param_1];
	ld.param.f64 	%fd1, [clamp_f64_param_2];
	ld.param.f64 	%fd2, [clamp_f64_param_3];
	ld.param.u32 	%r2, [clamp_f64_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd3, [%rd5];
	setp.lt.f64 	%p2, %fd3, %fd1;
	selp.f64 	%fd4, %fd1, %fd3, %p2;
	setp.gt.f64 	%p3, %fd4, %fd2;
	selp.f64 	%fd5, %fd2, %fd4, %p3;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f64 	[%rd7], %fd5;

$L__BB1_2:
	ret;

}
	// .globl	greater_equal
.visible .entry greater_equal(
	.param .u64 greater_equal_param_0,
	.param .u64 greater_equal_param_1,
	.param .u64 greater_equal_param_2,
	.param .u32 greater_equal_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [greater_equal_param_0];
	ld.param.u64 	%rd2, [greater_equal_param_1];
	ld.param.u64 	%rd3, [greater_equal_param_2];
	ld.param.u32 	%r2, [greater_equal_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	setp.ge.f32 	%p2, %f2, %f1;
	selp.f32 	%f3, 0f3F800000, 0f00000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

$L__BB2_2:
	ret;

}
	// .globl	greater
.visible .entry greater(
	.param .u64 greater_param_0,
	.param .u64 greater_param_1,
	.param .u64 greater_param_2,
	.param .u32 greater_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [greater_param_0];
	ld.param.u64 	%rd2, [greater_param_1];
	ld.param.u64 	%rd3, [greater_param_2];
	ld.param.u32 	%r2, [greater_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB3_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	setp.gt.f32 	%p2, %f2, %f1;
	selp.f32 	%f3, 0f3F800000, 0f00000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

$L__BB3_2:
	ret;

}
	// .globl	greater_equal_f64
.visible .entry greater_equal_f64(
	.param .u64 greater_equal_f64_param_0,
	.param .u64 greater_equal_f64_param_1,
	.param .u64 greater_equal_f64_param_2,
	.param .u32 greater_equal_f64_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [greater_equal_f64_param_0];
	ld.param.u64 	%rd2, [greater_equal_f64_param_1];
	ld.param.u64 	%rd3, [greater_equal_f64_param_2];
	ld.param.u32 	%r2, [greater_equal_f64_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB4_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f64 	%fd1, [%rd8];
	ld.global.f64 	%fd2, [%rd6];
	setp.ge.f64 	%p2, %fd2, %fd1;
	selp.f64 	%fd3, 0d3FF0000000000000, 0d0000000000000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f64 	[%rd10], %fd3;

$L__BB4_2:
	ret;

}
	// .globl	greater_f64
.visible .entry greater_f64(
	.param .u64 greater_f64_param_0,
	.param .u64 greater_f64_param_1,
	.param .u64 greater_f64_param_2,
	.param .u32 greater_f64_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [greater_f64_param_0];
	ld.param.u64 	%rd2, [greater_f64_param_1];
	ld.param.u64 	%rd3, [greater_f64_param_2];
	ld.param.u32 	%r2, [greater_f64_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB5_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f64 	%fd1, [%rd8];
	ld.global.f64 	%fd2, [%rd6];
	setp.gt.f64 	%p2, %fd2, %fd1;
	selp.f64 	%fd3, 0d3FF0000000000000, 0d0000000000000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f64 	[%rd10], %fd3;

$L__BB5_2:
	ret;

}
	// .globl	less_equal
.visible .entry less_equal(
	.param .u64 less_equal_param_0,
	.param .u64 less_equal_param_1,
	.param .u64 less_equal_param_2,
	.param .u32 less_equal_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [less_equal_param_0];
	ld.param.u64 	%rd2, [less_equal_param_1];
	ld.param.u64 	%rd3, [less_equal_param_2];
	ld.param.u32 	%r2, [less_equal_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB6_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	setp.le.f32 	%p2, %f2, %f1;
	selp.f32 	%f3, 0f3F800000, 0f00000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

$L__BB6_2:
	ret;

}
	// .globl	less_equal_f64
.visible .entry less_equal_f64(
	.param .u64 less_equal_f64_param_0,
	.param .u64 less_equal_f64_param_1,
	.param .u64 less_equal_f64_param_2,
	.param .u32 less_equal_f64_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [less_equal_f64_param_0];
	ld.param.u64 	%rd2, [less_equal_f64_param_1];
	ld.param.u64 	%rd3, [less_equal_f64_param_2];
	ld.param.u32 	%r2, [less_equal_f64_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB7_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f64 	%fd1, [%rd8];
	ld.global.f64 	%fd2, [%rd6];
	setp.le.f64 	%p2, %fd2, %fd1;
	selp.f64 	%fd3, 0d3FF0000000000000, 0d0000000000000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f64 	[%rd10], %fd3;

$L__BB7_2:
	ret;

}
	// .globl	less
.visible .entry less(
	.param .u64 less_param_0,
	.param .u64 less_param_1,
	.param .u64 less_param_2,
	.param .u32 less_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [less_param_0];
	ld.param.u64 	%rd2, [less_param_1];
	ld.param.u64 	%rd3, [less_param_2];
	ld.param.u32 	%r2, [less_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB8_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	setp.lt.f32 	%p2, %f2, %f1;
	selp.f32 	%f3, 0f3F800000, 0f00000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

$L__BB8_2:
	ret;

}
	// .globl	less_f64
.visible .entry less_f64(
	.param .u64 less_f64_param_0,
	.param .u64 less_f64_param_1,
	.param .u64 less_f64_param_2,
	.param .u32 less_f64_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [less_f64_param_0];
	ld.param.u64 	%rd2, [less_f64_param_1];
	ld.param.u64 	%rd3, [less_f64_param_2];
	ld.param.u32 	%r2, [less_f64_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB9_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f64 	%fd1, [%rd8];
	ld.global.f64 	%fd2, [%rd6];
	setp.lt.f64 	%p2, %fd2, %fd1;
	selp.f64 	%fd3, 0d3FF0000000000000, 0d0000000000000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f64 	[%rd10], %fd3;

$L__BB9_2:
	ret;

}
	// .globl	equal
.visible .entry equal(
	.param .u64 equal_param_0,
	.param .u64 equal_param_1,
	.param .u64 equal_param_2,
	.param .u32 equal_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [equal_param_0];
	ld.param.u64 	%rd2, [equal_param_1];
	ld.param.u64 	%rd3, [equal_param_2];
	ld.param.u32 	%r2, [equal_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB10_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	setp.eq.f32 	%p2, %f2, %f1;
	selp.f32 	%f3, 0f3F800000, 0f00000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

$L__BB10_2:
	ret;

}
	// .globl	equal_f64
.visible .entry equal_f64(
	.param .u64 equal_f64_param_0,
	.param .u64 equal_f64_param_1,
	.param .u64 equal_f64_param_2,
	.param .u32 equal_f64_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [equal_f64_param_0];
	ld.param.u64 	%rd2, [equal_f64_param_1];
	ld.param.u64 	%rd3, [equal_f64_param_2];
	ld.param.u32 	%r2, [equal_f64_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB11_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f64 	%fd1, [%rd8];
	ld.global.f64 	%fd2, [%rd6];
	setp.eq.f64 	%p2, %fd2, %fd1;
	selp.f64 	%fd3, 0d3FF0000000000000, 0d0000000000000000, %p2;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f64 	[%rd10], %fd3;

$L__BB11_2:
	ret;

}
	// .globl	logical_not
.visible .entry logical_not(
	.param .u64 logical_not_param_0,
	.param .u64 logical_not_param_1,
	.param .u32 logical_not_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [logical_not_param_0];
	ld.param.u64 	%rd2, [logical_not_param_1];
	ld.param.u32 	%r2, [logical_not_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB12_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	setp.eq.f32 	%p2, %f1, 0f00000000;
	selp.f32 	%f2, 0f3F800000, 0f00000000, %p2;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

$L__BB12_2:
	ret;

}
	// .globl	logical_not_f64
.visible .entry logical_not_f64(
	.param .u64 logical_not_f64_param_0,
	.param .u64 logical_not_f64_param_1,
	.param .u32 logical_not_f64_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [logical_not_f64_param_0];
	ld.param.u64 	%rd2, [logical_not_f64_param_1];
	ld.param.u32 	%r2, [logical_not_f64_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB13_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f64 	%fd1, [%rd5];
	setp.eq.f64 	%p2, %fd1, 0d0000000000000000;
	selp.f64 	%fd2, 0d3FF0000000000000, 0d0000000000000000, %p2;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f64 	[%rd7], %fd2;

$L__BB13_2:
	ret;

}
	// .globl	in_range
.visible .entry in_range(
	.param .u64 in_range_param_0,
	.param .f32 in_range_param_1,
	.param .f32 in_range_param_2,
	.param .u64 in_range_param_3,
	.param .u32 in_range_param_4
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [in_range_param_0];
	ld.param.f32 	%f1, [in_range_param_1];
	ld.param.f32 	%f2, [in_range_param_2];
	ld.param.u64 	%rd2, [in_range_param_3];
	ld.param.u32 	%r2, [in_range_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB14_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f3, [%rd6];
	setp.ge.f32 	%p2, %f3, %f1;
	setp.le.f32 	%p3, %f3, %f2;
	and.pred  	%p4, %p3, %p2;
	selp.f32 	%f4, 0f3F800000, 0f00000000, %p4;
	add.s64 	%rd7, %rd3, %rd5;
	st.global.f32 	[%rd7], %f4;

$L__BB14_2:
	ret;

}
	// .globl	in_range_f64
.visible .entry in_range_f64(
	.param .u64 in_range_f64_param_0,
	.param .f64 in_range_f64_param_1,
	.param .f64 in_range_f64_param_2,
	.param .u64 in_range_f64_param_3,
	.param .u32 in_range_f64_param_4
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [in_range_f64_param_0];
	ld.param.f64 	%fd1, [in_range_f64_param_1];
	ld.param.f64 	%fd2, [in_range_f64_param_2];
	ld.param.u64 	%rd2, [in_range_f64_param_3];
	ld.param.u32 	%r2, [in_range_f64_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB15_2;

	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd3, [%rd6];
	setp.ge.f64 	%p2, %fd3, %fd1;
	setp.le.f64 	%p3, %fd3, %fd2;
	and.pred  	%p4, %p3, %p2;
	selp.f64 	%fd4, 0d3FF0000000000000, 0d0000000000000000, %p4;
	add.s64 	%rd7, %rd3, %rd5;
	st.global.f64 	[%rd7], %fd4;

$L__BB15_2:
	ret;

}
	// .globl	sign
.visible .entry sign(
	.param .u64 sign_param_0,
	.param .u64 sign_param_1,
	.param .u32 sign_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd2, [sign_param_0];
	ld.param.u64 	%rd3, [sign_param_1];
	ld.param.u32 	%r2, [sign_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB16_6;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.gt.f32 	%p2, %f1, 0f00000000;
	cvta.to.global.u64 	%rd7, %rd3;
	add.s64 	%rd1, %rd7, %rd5;
	@%p2 bra 	$L__BB16_5;
	bra.uni 	$L__BB16_2;

$L__BB16_5:
	mov.u32 	%r8, 1065353216;
	st.global.u32 	[%rd1], %r8;
	bra.uni 	$L__BB16_6;

$L__BB16_2:
	setp.lt.f32 	%p3, %f1, 0f00000000;
	@%p3 bra 	$L__BB16_4;
	bra.uni 	$L__BB16_3;

$L__BB16_4:
	mov.u32 	%r7, -1082130432;
	st.global.u32 	[%rd1], %r7;
	bra.uni 	$L__BB16_6;

$L__BB16_3:
	mov.u32 	%r6, 0;
	st.global.u32 	[%rd1], %r6;

$L__BB16_6:
	ret;

}
	// .globl	sign_f64
.visible .entry sign_f64(
	.param .u64 sign_f64_param_0,
	.param .u64 sign_f64_param_1,
	.param .u32 sign_f64_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<2>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd2, [sign_f64_param_0];
	ld.param.u64 	%rd3, [sign_f64_param_1];
	ld.param.u32 	%r2, [sign_f64_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB17_6;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f64 	%fd1, [%rd6];
	setp.gt.f64 	%p2, %fd1, 0d0000000000000000;
	cvta.to.global.u64 	%rd7, %rd3;
	add.s64 	%rd1, %rd7, %rd5;
	@%p2 bra 	$L__BB17_5;
	bra.uni 	$L__BB17_2;

$L__BB17_5:
	mov.u64 	%rd10, 4607182418800017408;
	st.global.u64 	[%rd1], %rd10;
	bra.uni 	$L__BB17_6;

$L__BB17_2:
	setp.lt.f64 	%p3, %fd1, 0d0000000000000000;
	@%p3 bra 	$L__BB17_4;
	bra.uni 	$L__BB17_3;

$L__BB17_4:
	mov.u64 	%rd9, -4616189618054758400;
	st.global.u64 	[%rd1], %rd9;
	bra.uni 	$L__BB17_6;

$L__BB17_3:
	mov.u64 	%rd8, 0;
	st.global.u64 	[%rd1], %rd8;

$L__BB17_6:
	ret;

}
	// .globl	where_condition
.visible .entry where_condition(
	.param .u64 where_condition_param_0,
	.param .u64 where_condition_param_1,
	.param .u64 where_condition_param_2,
	.param .u64 where_condition_param_3,
	.param .u32 where_condition_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [where_condition_param_0];
	ld.param.u64 	%rd2, [where_condition_param_1];
	ld.param.u64 	%rd3, [where_condition_param_2];
	ld.param.u64 	%rd4, [where_condition_param_3];
	ld.param.u32 	%r2, [where_condition_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB18_2;

	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	setp.gt.f32 	%p2, %f1, 0f00000000;
	selp.b64 	%rd9, %rd2, %rd3, %p2;
	cvta.to.global.u64 	%rd10, %rd9;
	add.s64 	%rd11, %rd10, %rd7;
	ld.global.f32 	%f2, [%rd11];
	add.s64 	%rd12, %rd5, %rd7;
	st.global.f32 	[%rd12], %f2;

$L__BB18_2:
	ret;

}
	// .globl	where_condition_f64
.visible .entry where_condition_f64(
	.param .u64 where_condition_f64_param_0,
	.param .u64 where_condition_f64_param_1,
	.param .u64 where_condition_f64_param_2,
	.param .u64 where_condition_f64_param_3,
	.param .u32 where_condition_f64_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [where_condition_f64_param_0];
	ld.param.u64 	%rd2, [where_condition_f64_param_1];
	ld.param.u64 	%rd3, [where_condition_f64_param_2];
	ld.param.u64 	%rd4, [where_condition_f64_param_3];
	ld.param.u32 	%r2, [where_condition_f64_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB19_2;

	cvta.to.global.u64 	%rd5, %rd4;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f64 	%fd1, [%rd8];
	setp.gt.f64 	%p2, %fd1, 0d0000000000000000;
	selp.b64 	%rd9, %rd2, %rd3, %p2;
	cvta.to.global.u64 	%rd10, %rd9;
	add.s64 	%rd11, %rd10, %rd7;
	ld.global.f64 	%fd2, [%rd11];
	add.s64 	%rd12, %rd5, %rd7;
	st.global.f64 	[%rd12], %fd2;

$L__BB19_2:
	ret;

}

